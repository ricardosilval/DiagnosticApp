---
apiVersion: "v1"
kind: "Template"
metadata:
  annotations:
    fabric8.diagnosticapp/summary: "Simple JAXWS application deployed on Wildfly-Camel"
    description: "# WildFly-Camel CDI QuickStart\n\nThis quickstart deploys a simple\
      \ CDI application that calls a Camel route on WildFly. \nThis service can be\
      \ called from the home page of the application.\n\n### Building\n\nThe example\
      \ can be built with\n\n    mvn clean install\n\n### Running the example in fabric8\n\
      \nIt is assumed a running Kubernetes platform is already running. If not you\
      \ can find details how to [get started](http://fabric8.io/guide/getStarted/index.html).\n\
      \nThe example can be built and deployed using a single goal:\n\n    mvn -Pf8-local-deploy\n\
      \nWhen the example runs in fabric8, you can use the OpenShift client tool to\
      \ inspect the status\n\nTo list all the running pods:\n\n    oc get pods\n\n\
      Then find the name of the pod that runs this quickstart, and output the logs\
      \ from the running pods with:\n\n    oc logs <name of pod>\n\nYou can also use\
      \ the fabric8 [web console](http://fabric8.io/guide/console.html) to manage\
      \ the\nrunning pods, and view logs and much more.\n\n### Access services using\
      \ a web browser\n\nWhen the application is running, you can use a web browser\
      \ to access the HTTP service. Assuming that you\nhave a [Vagrant setup](http://fabric8.io/guide/getStarted/vagrant.html)\
      \ you can access the application with\n`http://wildfly-camel-jaxws-default.vagrant.f8/`.\n\
      \nNotice: As it depends on your OpenShift setup, the hostname (route) might\
      \ vary. Verify with `oc get routes` which\nhostname is valid for you.\n\n###\
      \ More details\n\nYou can find more details about running this [quickstart](http://fabric8.io/guide/quickstarts/running.html)\
      \ on the website. This also includes instructions how to change the Docker image\
      \ user and registry.\n"
    fabric8.diagnosticapp/iconUrl: "img/icons/wildfly.svg"
  labels: {}
  name: "diagnosticapp"
objects:
- apiVersion: "v1"
  kind: "Service"
  metadata:
    annotations:
      fabric8.io/iconUrl: "img/icons/wildfly.svg"
    labels:
      provider: "fabric8"
      project: "diagnosticapp"
      version: "1.0"
      group: "quickstarts"
    name: "diagnosticapp"
  spec:
    deprecatedPublicIPs: []
    externalIPs: []
    ports:
    - port: 80
      protocol: "TCP"
      targetPort: 8080
    selector:
      project: "diagnosticapp"
      provider: "fabric8"
      group: "quickstarts"
    type: "LoadBalancer"
- apiVersion: "v1"
  kind: "ReplicationController"
  metadata:
    annotations:
      fabric8.io/iconUrl: "img/icons/wildfly.svg"
      fabric8.io/git-branch: "master"
      fabric8.io/git-commit: "9ae612f9336c06d648cb1fc39af0737677c84cda"
    labels:
      provider: "fabric8"
      project: "diagnosticapp"
      version: "1.0"
      group: "quickstarts"
    name: "diagnosticapp"
  spec:
    replicas: 1
    selector:
      provider: "fabric8"
      project: "diagnosticapp"
      version: "1.0"
      group: "quickstarts"
    template:
      metadata:
        annotations: {}
        labels:
          provider: "fabric8"
          project: "diagnosticapp"
          version: "1.0"
          group: "quickstarts"
      spec:
        containers:
        - args: []
          command: []
          env:
          - name: "KUBERNETES_NAMESPACE"
            valueFrom:
              fieldRef:
                fieldPath: "metadata.namespace"
          image: "fabric8/diagnosticapp:1.0"
          name: "diagnosticapp"
          ports: []
          readinessProbe:
            httpGet:
              httpHeaders: []
              path: "/"
              port: 8080
            initialDelaySeconds: 5
            timeoutSeconds: 30
          resources:
            limits:
              cpu: "0"
              memory: "0"
            requests:
              cpu: "0"
              memory: "0"
          securityContext: {}
          volumeMounts: []
        imagePullSecrets: []
        nodeSelector: {}
        volumes: []
parameters: []
